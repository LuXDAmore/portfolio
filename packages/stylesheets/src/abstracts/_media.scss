// Media
/// Create re-usable media-queries
/// @group helpers
/// @param {string|boolean=} $container-start - Generate a `min-width` query
/// @param {string|boolean} $container-end - Generate a `max-width` query
/// @param {string} $size-start - Witch value to get for start the container, defaults to `base`
/// @param {string} $size-end - Witch value to get to end the container, defaults to `down`
/// @require {map} $containers - The main map where to get dimensions
/// @output '@media only screen' depending on passed values
@mixin media-screen( $container-start: false, $container-end: false, $size-start: base, $size-end: down ) {

    @if $container-start and $container-end {

        /* stylelint-disable-next-line media-query-no-invalid -- Stylelint non capisce che è scss e da errore. */
        @media only screen and (min-width: #{get-breakpoint($container-start, $size-start)}) and (max-width: #{get-breakpoint($container-end, $size-end)}) {

            @content;

        }

    } @else if $container-end and not $container-start {

        /* stylelint-disable-next-line media-query-no-invalid -- Stylelint non capisce che è scss e da errore. */
        @media only screen and (max-width: #{get-breakpoint($container-end, $size-end)}) {

            @content;

        }

    } @else {

        /* stylelint-disable-next-line media-query-no-invalid -- Stylelint non capisce che è scss e da errore. */
        @media only screen and (min-width: #{get-breakpoint($container-start, $size-start)}) {

            @content;

        }

    }

}
@mixin media-height( $size, $min: false ) {
    @if $min {

        /* stylelint-disable-next-line media-query-no-invalid -- Stylelint non capisce che è scss e da errore. */
        @media only screen and (min-height: #{$size}) {

            @content;

        }

    } @else {

        /* stylelint-disable-next-line media-query-no-invalid -- Stylelint non capisce che è scss e da errore. */
        @media only screen and (max-height: #{$size}) {

            @content;

        }

    }

}

// Queries
// XXS
@mixin zero-to-xxs() {

    @include media-screen( false, "xxs" ) {

        @content;

    }

}
@mixin xxs-and-up() {

    @include media-screen( "xxs" ) {

        @content;

    }

}

// XS
@mixin zero-to-xs() {

    @include media-screen( false, "xs" ) {

        @content;

    }

}
@mixin xs-and-up() {

    @include media-screen( "xs" ) {

        @content;

    }

}

// SM
@mixin zero-to-sm() {

    @include media-screen( false, "sm" ) {

        @content;

    }

}
@mixin sm-and-up() {

    @include media-screen( "sm" ) {

        @content;

    }

}
@mixin sm-to-md() {

    @include media-screen( "sm", "md" ) {

        @content;

    }

}

// MD
@mixin zero-to-md() {

    @include media-screen( false, "md" ) {

        @content;

    }

}
@mixin md-and-up() {

    @include media-screen( "md" ) {

        @content;

    }

}
@mixin md-to-lg() {

    @include media-screen( "md", "lg" ) {

        @content;

    }

}

// LG
@mixin zero-to-lg() {

    @include media-screen( false, "lg" ) {

        @content;

    }

}
@mixin lg-and-up() {

    @include media-screen( "lg" ) {

        @content;

    }

}
@mixin lg-to-xl() {

    @include media-screen( "lg", "xl" ) {

        @content;

    }

}
@mixin lg-to-xxl() {

    @include media-screen( "lg", "xxl" ) {

        @content;

    }

}

// XL
@mixin xl-and-up() {

    @include media-screen( "xl" ) {

        @content;

    }

}

// 2XL
@mixin xxl-and-up() {

    @include media-screen( "xxl" ) {

        @content;

    }

}
@mixin xxl-to-xxxl() {

    @include media-screen( "xxl", "xxxl" ) {

        @content;

    }

}

// 3XL
@mixin xxxl-and-up() {

    @include media-screen( "xxxl" ) {

        @content;

    }

}
