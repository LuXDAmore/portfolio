@use "sass:string";

// https://stackoverflow.com/questions/45194144/why-use-mixin-of-padding-and-margin-in-sass
// padding, margin spacer vars
$max: 5;
$zero: 0;
$one: "0.25rem";
$two: "0.5rem";
$three: "1rem";
$four: "2rem";
$five: "4rem";
$six: "6rem";
$spaces: ( $zero, $one, $two, $three, $four, $five, $six ); // Adjust this to include the pixel amounts you need.
$sides: ( x, y, all, top, bottom, left, right ); // Leave this variable alone
$i: -1;

@each $space in $spaces {

    $i: $i + 1;

    @each $side in $sides {
        @if $side == all {
            .pa-#{$i} {

                padding: #{$space} #{$space} !important;

            }
        } @else if $side == x {
            .px-#{$i} {

                padding-right: #{$space} !important;
                padding-left: #{$space} !important;

            }
        } @else if $side == y {
            .py-#{$i} {

                padding-top: #{$space} !important;
                padding-bottom: #{$space} !important;

            }
        } @else {
            .p#{string.slice($side, 0, 1)}-#{$i} {

                padding-#{$side}: #{$space} !important;

            }
        }
    }
    @each $side in $sides {
        @if $side == all {
            .ma-#{$i} {

                margin: #{$space} #{$space} !important;

            }
        } @else if $side == x {
            .mx-#{$i} {

                margin-right: #{$space} !important;
                margin-left: #{$space} !important;

            }
        } @else if $side == y {
            .my-#{$i} {

                margin-top: #{$space} !important;
                margin-bottom: #{$space} !important;

            }
        } @else {
            .m#{string.slice($side, 0, 1)}-#{$i} {

                margin-#{$side}: #{$space} !important;

            }
        }
    }

}
